#include <cstdio>
#include <iostream>
#include <cmath>
#include <random>
#include <cstdlib>
#include <vector>
#include "mpi.h"

int main(int argc, char **argv) 
{
  typedef std::vector<double>Matrix;
  int pid, np;
  MPI_Init(&argc, &argv);
  MPI_Comm_rank(MPI_COMM_WORLD, &pid);
  MPI_Comm_size(MPI_COMM_WORLD, &np);
  
  int N = 0;
  if (0 == pid)
    {
      std::printf("Por favor escriba el total de elementos N:\n");
      std::scanf("%d", &N);
    }
  MPI_Bcast(&N, 1, MPI_INT, 0, MPI_COMM_WORLD);
  int nlocal = N/np;
  Matrix m(N*N/nlocal);
  int imin=pid*nlocal;  
  MPI_Scatter(&m[0], 1, MPI_INT, &imin, 1, MPI_INT, 0, MPI_COMM_WORLD);
  
  for (int ii = imin ; ii < imin+nlocal; ++ii)
    {
      for (int jj =0; jj < N; ++jj)
	{
	  if (ii == jj)
	    {
	      m[ii*N + jj] = 1.0;
	    }
	  else
	    {
	      m[ii*N + jj]=0.0;
	    }
	}
    }

  Matrix q(N*N);
  MPI_Gather(&m, 1 , MPI_INT,&nlocal, 1, MPI_INT, 0, MPI_COMM_WORLD);
  
  if (0 == pid)
    {
      double total = 0;
      for (int ii = 0; ii < N; ++ii)
	{
	  std::printf("El promedio es : %f\n", m[ii,ii]);
	}
    }
  
  
  MPI_Finalize();
  
  return 0;
}
