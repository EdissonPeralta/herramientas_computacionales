#include <omp.h>
#include <iostream>
#include <cstdio>
#include <vector>
#include <numeric>
#include <algorithm>
#include <cstdlib>


const int N = 1000000;

int main(int argc, char *argv[]) 
{
  std::vector<double> data(N);
  std::fill(data.begin(), data.end(), 1.5); 
  int nthreads = std::atoi(argv[1]);
  std::vector<double> sumas(nthreads, 0.0);
  std::fill(sumas.begin(), sumas.end(), 0.0);

#pragma omp parallel num_threads(nthreads)
  {
    int tid = omp_get_thread_num();
    int size = N/nthreads;
    int imin = tid*size;
    for (int ii = imin; ii <imin + size; ++ii) {
      sumas[tid] += data[ii]; 
    }
  }

  double suma = 0.0;
  for(auto x : sumas) {
    suma += x;
  }

  std::cout << "mean calculada: " << suma/N << std::endl;
  std::cout << "mean esperada : " << 1.5 << std::endl;

  return 0;
}

